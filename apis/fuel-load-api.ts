/* tslint:disable */
/* eslint-disable */
/**
 * PROJECT API - Development
 * PROJECT .NET Core Web API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FuelLoadDTO } from '../models';
import { FuelLoadDetailDTOPagedResult } from '../models';
import { FuelLoadNewEditDTO } from '../models';
import { PerformanceFilterDTO } from '../models';
import { SortOrderEnum } from '../models';
import { StatisticsFilterDTO } from '../models';
/**
 * FuelLoadApi - axios parameter creator
 * @export
 */
export const FuelLoadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [id] 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadFindForVehicleGet: async (page: number, pageSize: number, id?: string, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiFuelLoadFindForVehicleGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling apiFuelLoadFindForVehicleGet.');
            }
            const localVarPath = `/api/FuelLoad/FindForVehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (orderByPropertyName !== undefined) {
                localVarQueryParameter['OrderByPropertyName'] = orderByPropertyName;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FuelLoad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadGetFormGet: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FuelLoad/GetForm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiFuelLoadIdDelete.');
            }
            const localVarPath = `/api/FuelLoad/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiFuelLoadIdGet.');
            }
            const localVarPath = `/api/FuelLoad/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} vehicleId 
         * @param {string} chargeDate 
         * @param {string} chargeHour 
         * @param {number} liters 
         * @param {number} amount 
         * @param {number} odometer 
         * @param {string} odometerMeasurementId 
         * @param {string} id 
         * @param {Array<Blob>} [imageFiles] 
         * @param {Array<string>} [imagesToRemove] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {number} [providerId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [unitCost] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadIdPutForm: async (vehicleId: string, chargeDate: string, chargeHour: string, liters: number, amount: number, odometer: number, odometerMeasurementId: string, id: string, imageFiles?: Array<Blob>, imagesToRemove?: Array<string>, reference?: string, full?: boolean, resetTank?: boolean, providerId?: number, fuelMeasureId?: string, userDriverId?: string, unitCost?: number, summary?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            if (vehicleId === null || vehicleId === undefined) {
                throw new RequiredError('vehicleId','Required parameter vehicleId was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'chargeDate' is not null or undefined
            if (chargeDate === null || chargeDate === undefined) {
                throw new RequiredError('chargeDate','Required parameter chargeDate was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'chargeHour' is not null or undefined
            if (chargeHour === null || chargeHour === undefined) {
                throw new RequiredError('chargeHour','Required parameter chargeHour was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'liters' is not null or undefined
            if (liters === null || liters === undefined) {
                throw new RequiredError('liters','Required parameter liters was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'odometer' is not null or undefined
            if (odometer === null || odometer === undefined) {
                throw new RequiredError('odometer','Required parameter odometer was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'odometerMeasurementId' is not null or undefined
            if (odometerMeasurementId === null || odometerMeasurementId === undefined) {
                throw new RequiredError('odometerMeasurementId','Required parameter odometerMeasurementId was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiFuelLoadIdPutForm.');
            }
            const localVarPath = `/api/FuelLoad/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (imagesToRemove) {
                localVarQueryParameter['ImagesToRemove'] = imagesToRemove;
            }

            if (vehicleId !== undefined) {
                localVarQueryParameter['VehicleId'] = vehicleId;
            }

            if (chargeDate !== undefined) {
                localVarQueryParameter['ChargeDate'] = chargeDate;
            }

            if (chargeHour !== undefined) {
                localVarQueryParameter['ChargeHour'] = chargeHour;
            }

            if (reference !== undefined) {
                localVarQueryParameter['Reference'] = reference;
            }

            if (full !== undefined) {
                localVarQueryParameter['Full'] = full;
            }

            if (resetTank !== undefined) {
                localVarQueryParameter['ResetTank'] = resetTank;
            }

            if (providerId !== undefined) {
                localVarQueryParameter['ProviderId'] = providerId;
            }

            if (liters !== undefined) {
                localVarQueryParameter['Liters'] = liters;
            }

            if (fuelMeasureId !== undefined) {
                localVarQueryParameter['FuelMeasureId'] = fuelMeasureId;
            }

            if (userDriverId !== undefined) {
                localVarQueryParameter['UserDriverId'] = userDriverId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['Amount'] = amount;
            }

            if (unitCost !== undefined) {
                localVarQueryParameter['UnitCost'] = unitCost;
            }

            if (odometer !== undefined) {
                localVarQueryParameter['Odometer'] = odometer;
            }

            if (odometerMeasurementId !== undefined) {
                localVarQueryParameter['OdometerMeasurementId'] = odometerMeasurementId;
            }

            if (summary !== undefined) {
                localVarQueryParameter['Summary'] = summary;
            }

            if (imageFiles) {
                imageFiles.forEach((element) => {
                    localVarFormParams.append('ImageFiles', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [vehicleId] 
         * @param {string} [chargeDate] 
         * @param {string} [chargeHour] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {Array<Blob>} [imageFiles] 
         * @param {number} [providerId] 
         * @param {number} [liters] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [amount] 
         * @param {number} [unitCost] 
         * @param {number} [odometer] 
         * @param {string} [odometerMeasurementId] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadPostForm: async (vehicleId?: string, chargeDate?: string, chargeHour?: string, reference?: string, full?: boolean, resetTank?: boolean, imageFiles?: Array<Blob>, providerId?: number, liters?: number, fuelMeasureId?: string, userDriverId?: string, amount?: number, unitCost?: number, odometer?: number, odometerMeasurementId?: string, summary?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FuelLoad`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (vehicleId !== undefined) { 
                localVarFormParams.append('VehicleId', vehicleId as any);
            }

            if (chargeDate !== undefined) { 
                localVarFormParams.append('ChargeDate', chargeDate as any);
            }

            if (chargeHour !== undefined) { 
                localVarFormParams.append('ChargeHour', chargeHour as any);
            }

            if (reference !== undefined) { 
                localVarFormParams.append('Reference', reference as any);
            }

            if (full !== undefined) { 
                localVarFormParams.append('Full', full as any);
            }

            if (resetTank !== undefined) { 
                localVarFormParams.append('ResetTank', resetTank as any);
            }
            if (imageFiles) {
                imageFiles.forEach((element) => {
                    localVarFormParams.append('ImageFiles', element as any);
                })
            }

            if (providerId !== undefined) { 
                localVarFormParams.append('ProviderId', providerId as any);
            }

            if (liters !== undefined) { 
                localVarFormParams.append('Liters', liters as any);
            }

            if (fuelMeasureId !== undefined) { 
                localVarFormParams.append('FuelMeasureId', fuelMeasureId as any);
            }

            if (userDriverId !== undefined) { 
                localVarFormParams.append('UserDriverId', userDriverId as any);
            }

            if (amount !== undefined) { 
                localVarFormParams.append('Amount', amount as any);
            }

            if (unitCost !== undefined) { 
                localVarFormParams.append('UnitCost', unitCost as any);
            }

            if (odometer !== undefined) { 
                localVarFormParams.append('Odometer', odometer as any);
            }

            if (odometerMeasurementId !== undefined) { 
                localVarFormParams.append('OdometerMeasurementId', odometerMeasurementId as any);
            }

            if (summary !== undefined) { 
                localVarFormParams.append('Summary', summary as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadSearchGet: async (page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiFuelLoadSearchGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling apiFuelLoadSearchGet.');
            }
            const localVarPath = `/api/FuelLoad/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (orderByPropertyName !== undefined) {
                localVarQueryParameter['OrderByPropertyName'] = orderByPropertyName;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StatisticsFilterDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFuelLoadStatisticsPost: async (body?: StatisticsFilterDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FuelLoad/Statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuelLoadApi - functional programming interface
 * @export
 */
export const FuelLoadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [id] 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadFindForVehicleGet(page: number, pageSize: number, id?: string, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadFindForVehicleGet(page, pageSize, id, search, orderByPropertyName, sortOrder, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FuelLoadDTO>>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadGetFormGet(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuelLoadNewEditDTO>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadGetFormGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuelLoadDTO>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} vehicleId 
         * @param {string} chargeDate 
         * @param {string} chargeHour 
         * @param {number} liters 
         * @param {number} amount 
         * @param {number} odometer 
         * @param {string} odometerMeasurementId 
         * @param {string} id 
         * @param {Array<Blob>} [imageFiles] 
         * @param {Array<string>} [imagesToRemove] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {number} [providerId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [unitCost] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdPutForm(vehicleId: string, chargeDate: string, chargeHour: string, liters: number, amount: number, odometer: number, odometerMeasurementId: string, id: string, imageFiles?: Array<Blob>, imagesToRemove?: Array<string>, reference?: string, full?: boolean, resetTank?: boolean, providerId?: number, fuelMeasureId?: string, userDriverId?: string, unitCost?: number, summary?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadIdPutForm(vehicleId, chargeDate, chargeHour, liters, amount, odometer, odometerMeasurementId, id, imageFiles, imagesToRemove, reference, full, resetTank, providerId, fuelMeasureId, userDriverId, unitCost, summary, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [vehicleId] 
         * @param {string} [chargeDate] 
         * @param {string} [chargeHour] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {Array<Blob>} [imageFiles] 
         * @param {number} [providerId] 
         * @param {number} [liters] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [amount] 
         * @param {number} [unitCost] 
         * @param {number} [odometer] 
         * @param {string} [odometerMeasurementId] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadPostForm(vehicleId?: string, chargeDate?: string, chargeHour?: string, reference?: string, full?: boolean, resetTank?: boolean, imageFiles?: Array<Blob>, providerId?: number, liters?: number, fuelMeasureId?: string, userDriverId?: string, amount?: number, unitCost?: number, odometer?: number, odometerMeasurementId?: string, summary?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadPostForm(vehicleId, chargeDate, chargeHour, reference, full, resetTank, imageFiles, providerId, liters, fuelMeasureId, userDriverId, amount, unitCost, odometer, odometerMeasurementId, summary, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {StatisticsFilterDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadStatisticsPost(body?: StatisticsFilterDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PerformanceFilterDTO>>> {
            const localVarAxiosArgs = await FuelLoadApiAxiosParamCreator(configuration).apiFuelLoadStatisticsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FuelLoadApi - factory interface
 * @export
 */
export const FuelLoadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [id] 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadFindForVehicleGet(page: number, pageSize: number, id?: string, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>> {
            return FuelLoadApiFp(configuration).apiFuelLoadFindForVehicleGet(page, pageSize, id, search, orderByPropertyName, sortOrder, active, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FuelLoadDTO>>> {
            return FuelLoadApiFp(configuration).apiFuelLoadGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadGetFormGet(id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FuelLoadNewEditDTO>> {
            return FuelLoadApiFp(configuration).apiFuelLoadGetFormGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return FuelLoadApiFp(configuration).apiFuelLoadIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<FuelLoadDTO>> {
            return FuelLoadApiFp(configuration).apiFuelLoadIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} vehicleId 
         * @param {string} chargeDate 
         * @param {string} chargeHour 
         * @param {number} liters 
         * @param {number} amount 
         * @param {number} odometer 
         * @param {string} odometerMeasurementId 
         * @param {string} id 
         * @param {Array<Blob>} [imageFiles] 
         * @param {Array<string>} [imagesToRemove] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {number} [providerId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [unitCost] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadIdPutForm(vehicleId: string, chargeDate: string, chargeHour: string, liters: number, amount: number, odometer: number, odometerMeasurementId: string, id: string, imageFiles?: Array<Blob>, imagesToRemove?: Array<string>, reference?: string, full?: boolean, resetTank?: boolean, providerId?: number, fuelMeasureId?: string, userDriverId?: string, unitCost?: number, summary?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return FuelLoadApiFp(configuration).apiFuelLoadIdPutForm(vehicleId, chargeDate, chargeHour, liters, amount, odometer, odometerMeasurementId, id, imageFiles, imagesToRemove, reference, full, resetTank, providerId, fuelMeasureId, userDriverId, unitCost, summary, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [vehicleId] 
         * @param {string} [chargeDate] 
         * @param {string} [chargeHour] 
         * @param {string} [reference] 
         * @param {boolean} [full] 
         * @param {boolean} [resetTank] 
         * @param {Array<Blob>} [imageFiles] 
         * @param {number} [providerId] 
         * @param {number} [liters] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [userDriverId] 
         * @param {number} [amount] 
         * @param {number} [unitCost] 
         * @param {number} [odometer] 
         * @param {string} [odometerMeasurementId] 
         * @param {boolean} [summary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadPostForm(vehicleId?: string, chargeDate?: string, chargeHour?: string, reference?: string, full?: boolean, resetTank?: boolean, imageFiles?: Array<Blob>, providerId?: number, liters?: number, fuelMeasureId?: string, userDriverId?: string, amount?: number, unitCost?: number, odometer?: number, odometerMeasurementId?: string, summary?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return FuelLoadApiFp(configuration).apiFuelLoadPostForm(vehicleId, chargeDate, chargeHour, reference, full, resetTank, imageFiles, providerId, liters, fuelMeasureId, userDriverId, amount, unitCost, odometer, odometerMeasurementId, summary, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>> {
            return FuelLoadApiFp(configuration).apiFuelLoadSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatisticsFilterDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFuelLoadStatisticsPost(body?: StatisticsFilterDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<PerformanceFilterDTO>> {
            return FuelLoadApiFp(configuration).apiFuelLoadStatisticsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuelLoadApi - object-oriented interface
 * @export
 * @class FuelLoadApi
 * @extends {BaseAPI}
 */
export class FuelLoadApi extends BaseAPI {
    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} [id] 
     * @param {string} [search] 
     * @param {string} [orderByPropertyName] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadFindForVehicleGet(page: number, pageSize: number, id?: string, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadFindForVehicleGet(page, pageSize, id, search, orderByPropertyName, sortOrder, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FuelLoadDTO>>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadGetFormGet(id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuelLoadNewEditDTO>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadGetFormGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuelLoadDTO>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} vehicleId 
     * @param {string} chargeDate 
     * @param {string} chargeHour 
     * @param {number} liters 
     * @param {number} amount 
     * @param {number} odometer 
     * @param {string} odometerMeasurementId 
     * @param {string} id 
     * @param {Array<Blob>} [imageFiles] 
     * @param {Array<string>} [imagesToRemove] 
     * @param {string} [reference] 
     * @param {boolean} [full] 
     * @param {boolean} [resetTank] 
     * @param {number} [providerId] 
     * @param {string} [fuelMeasureId] 
     * @param {string} [userDriverId] 
     * @param {number} [unitCost] 
     * @param {boolean} [summary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadIdPutForm(vehicleId: string, chargeDate: string, chargeHour: string, liters: number, amount: number, odometer: number, odometerMeasurementId: string, id: string, imageFiles?: Array<Blob>, imagesToRemove?: Array<string>, reference?: string, full?: boolean, resetTank?: boolean, providerId?: number, fuelMeasureId?: string, userDriverId?: string, unitCost?: number, summary?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadIdPutForm(vehicleId, chargeDate, chargeHour, liters, amount, odometer, odometerMeasurementId, id, imageFiles, imagesToRemove, reference, full, resetTank, providerId, fuelMeasureId, userDriverId, unitCost, summary, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [vehicleId] 
     * @param {string} [chargeDate] 
     * @param {string} [chargeHour] 
     * @param {string} [reference] 
     * @param {boolean} [full] 
     * @param {boolean} [resetTank] 
     * @param {Array<Blob>} [imageFiles] 
     * @param {number} [providerId] 
     * @param {number} [liters] 
     * @param {string} [fuelMeasureId] 
     * @param {string} [userDriverId] 
     * @param {number} [amount] 
     * @param {number} [unitCost] 
     * @param {number} [odometer] 
     * @param {string} [odometerMeasurementId] 
     * @param {boolean} [summary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadPostForm(vehicleId?: string, chargeDate?: string, chargeHour?: string, reference?: string, full?: boolean, resetTank?: boolean, imageFiles?: Array<Blob>, providerId?: number, liters?: number, fuelMeasureId?: string, userDriverId?: string, amount?: number, unitCost?: number, odometer?: number, odometerMeasurementId?: string, summary?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadPostForm(vehicleId, chargeDate, chargeHour, reference, full, resetTank, imageFiles, providerId, liters, fuelMeasureId, userDriverId, amount, unitCost, odometer, odometerMeasurementId, summary, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} [search] 
     * @param {string} [orderByPropertyName] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<FuelLoadDetailDTOPagedResult>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {StatisticsFilterDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuelLoadApi
     */
    public async apiFuelLoadStatisticsPost(body?: StatisticsFilterDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<PerformanceFilterDTO>> {
        return FuelLoadApiFp(this.configuration).apiFuelLoadStatisticsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
