/* tslint:disable */
/* eslint-disable */
/**
 * PROJECT API - Development
 * PROJECT .NET Core Web API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ProjectCompanyDTO } from '../models';
import { SortOrderEnum } from '../models';
import { VehicleDTO } from '../models';
import { VehicleDTOPagedResult } from '../models';
import { VehicleDetailDTO } from '../models';
import { VehicleInboxDTOPagedResult } from '../models';
import { VehicleNewEditDTO } from '../models';
import { VehiclePostDTO } from '../models';
import { VehiclePutDTO } from '../models';
/**
 * VehicleApi - axios parameter creator
 * @export
 */
export const VehicleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [vehicles] 
         * @param {boolean} [all] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleDownloadGet: async (vehicles?: Array<string>, all?: boolean, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Vehicle/Download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (vehicles) {
                localVarQueryParameter['vehicles'] = vehicles;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {VehiclePutDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleEditIdPut: async (id: string, body?: VehiclePutDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleEditIdPut.');
            }
            const localVarPath = `/api/Vehicle/Edit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleGetFormGet: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Vehicle/GetForm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleIdActivePut: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleIdActivePut.');
            }
            const localVarPath = `/api/Vehicle/{Id}/Active`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleIdDelete.');
            }
            const localVarPath = `/api/Vehicle/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} dId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleIdDrillRigDIdPut: async (id: string, dId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleIdDrillRigDIdPut.');
            }
            // verify required parameter 'dId' is not null or undefined
            if (dId === null || dId === undefined) {
                throw new RequiredError('dId','Required parameter dId was null or undefined when calling apiVehicleIdDrillRigDIdPut.');
            }
            const localVarPath = `/api/Vehicle/{Id}/DrillRig/{DId}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"DId"}}`, encodeURIComponent(String(dId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleIdGet.');
            }
            const localVarPath = `/api/Vehicle/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} VIN 
         * @param {string} machineId 
         * @param {string} description 
         * @param {string} economicNumber 
         * @param {string} id 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {Array<string>} [photosToRemove] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleIdPutForm: async (VIN: string, machineId: string, description: string, economicNumber: string, id: string, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, photosToRemove?: Array<string>, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'VIN' is not null or undefined
            if (VIN === null || VIN === undefined) {
                throw new RequiredError('VIN','Required parameter VIN was null or undefined when calling apiVehicleIdPutForm.');
            }
            // verify required parameter 'machineId' is not null or undefined
            if (machineId === null || machineId === undefined) {
                throw new RequiredError('machineId','Required parameter machineId was null or undefined when calling apiVehicleIdPutForm.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling apiVehicleIdPutForm.');
            }
            // verify required parameter 'economicNumber' is not null or undefined
            if (economicNumber === null || economicNumber === undefined) {
                throw new RequiredError('economicNumber','Required parameter economicNumber was null or undefined when calling apiVehicleIdPutForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiVehicleIdPutForm.');
            }
            const localVarPath = `/api/Vehicle/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (photosToRemove) {
                localVarQueryParameter['PhotosToRemove'] = photosToRemove;
            }

            if (VIN !== undefined) {
                localVarQueryParameter['VIN'] = VIN;
            }

            if (machineId !== undefined) {
                localVarQueryParameter['MachineId'] = machineId;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (economicNumber !== undefined) {
                localVarQueryParameter['EconomicNumber'] = economicNumber;
            }

            if (assignedId !== undefined) {
                localVarQueryParameter['AssignedId'] = assignedId;
            }

            if (brandId !== undefined) {
                localVarQueryParameter['BrandId'] = brandId;
            }

            if (modelId !== undefined) {
                localVarQueryParameter['ModelId'] = modelId;
            }

            if (modelYear !== undefined) {
                localVarQueryParameter['ModelYear'] = modelYear;
            }

            if (engineId !== undefined) {
                localVarQueryParameter['EngineId'] = engineId;
            }

            if (placas !== undefined) {
                localVarQueryParameter['Placas'] = placas;
            }

            if (drillRigId !== undefined) {
                localVarQueryParameter['DrillRigId'] = drillRigId;
            }

            if (policyId !== undefined) {
                localVarQueryParameter['PolicyId'] = policyId;
            }

            if (incisoId !== undefined) {
                localVarQueryParameter['IncisoId'] = incisoId;
            }

            if (packagePolicyId !== undefined) {
                localVarQueryParameter['PackagePolicyId'] = packagePolicyId;
            }

            if (measureId !== undefined) {
                localVarQueryParameter['MeasureId'] = measureId;
            }

            if (fuelMeasureId !== undefined) {
                localVarQueryParameter['FuelMeasureId'] = fuelMeasureId;
            }

            if (fuelTypeId !== undefined) {
                localVarQueryParameter['FuelTypeId'] = fuelTypeId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['CompanyId'] = companyId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (tankSize !== undefined) {
                localVarQueryParameter['TankSize'] = tankSize;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            if (photographsFiles) {
                photographsFiles.forEach((element) => {
                    localVarFormParams.append('PhotographsFiles', element as any);
                })
            }

            if (billFile !== undefined) { 
                localVarFormParams.append('BillFile', billFile as any);
            }

            if (pedimentoFile !== undefined) { 
                localVarFormParams.append('PedimentoFile', pedimentoFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleInboxGet: async (page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiVehicleInboxGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling apiVehicleInboxGet.');
            }
            const localVarPath = `/api/Vehicle/Inbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (orderByPropertyName !== undefined) {
                localVarQueryParameter['OrderByPropertyName'] = orderByPropertyName;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [VIN] 
         * @param {string} [machineId] 
         * @param {string} [description] 
         * @param {string} [economicNumber] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehiclePostForm: async (VIN?: string, machineId?: string, description?: string, economicNumber?: string, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (VIN !== undefined) { 
                localVarFormParams.append('VIN', VIN as any);
            }

            if (machineId !== undefined) { 
                localVarFormParams.append('MachineId', machineId as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }

            if (economicNumber !== undefined) { 
                localVarFormParams.append('EconomicNumber', economicNumber as any);
            }

            if (assignedId !== undefined) { 
                localVarFormParams.append('AssignedId', assignedId as any);
            }

            if (brandId !== undefined) { 
                localVarFormParams.append('BrandId', brandId as any);
            }

            if (modelId !== undefined) { 
                localVarFormParams.append('ModelId', modelId as any);
            }

            if (modelYear !== undefined) { 
                localVarFormParams.append('ModelYear', modelYear as any);
            }

            if (engineId !== undefined) { 
                localVarFormParams.append('EngineId', engineId as any);
            }

            if (placas !== undefined) { 
                localVarFormParams.append('Placas', placas as any);
            }

            if (drillRigId !== undefined) { 
                localVarFormParams.append('DrillRigId', drillRigId as any);
            }

            if (policyId !== undefined) { 
                localVarFormParams.append('PolicyId', policyId as any);
            }

            if (incisoId !== undefined) { 
                localVarFormParams.append('IncisoId', incisoId as any);
            }

            if (packagePolicyId !== undefined) { 
                localVarFormParams.append('PackagePolicyId', packagePolicyId as any);
            }

            if (measureId !== undefined) { 
                localVarFormParams.append('MeasureId', measureId as any);
            }

            if (fuelMeasureId !== undefined) { 
                localVarFormParams.append('FuelMeasureId', fuelMeasureId as any);
            }

            if (fuelTypeId !== undefined) { 
                localVarFormParams.append('FuelTypeId', fuelTypeId as any);
            }

            if (companyId !== undefined) { 
                localVarFormParams.append('CompanyId', companyId as any);
            }

            if (categoryId !== undefined) { 
                localVarFormParams.append('CategoryId', categoryId as any);
            }

            if (tankSize !== undefined) { 
                localVarFormParams.append('TankSize', tankSize as any);
            }

            if (active !== undefined) { 
                localVarFormParams.append('Active', active as any);
            }
            if (photographsFiles) {
                photographsFiles.forEach((element) => {
                    localVarFormParams.append('PhotographsFiles', element as any);
                })
            }

            if (billFile !== undefined) { 
                localVarFormParams.append('BillFile', billFile as any);
            }

            if (pedimentoFile !== undefined) { 
                localVarFormParams.append('PedimentoFile', pedimentoFile as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VehiclePostDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleSavePost: async (body?: VehiclePostDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Vehicle/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVehicleSearchGet: async (page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling apiVehicleSearchGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling apiVehicleSearchGet.');
            }
            const localVarPath = `/api/Vehicle/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (orderByPropertyName !== undefined) {
                localVarQueryParameter['OrderByPropertyName'] = orderByPropertyName;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['SortOrder'] = sortOrder;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleApi - functional programming interface
 * @export
 */
export const VehicleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [vehicles] 
         * @param {boolean} [all] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleDownloadGet(vehicles?: Array<string>, all?: boolean, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleDownloadGet(vehicles, all, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {VehiclePutDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleEditIdPut(id: string, body?: VehiclePutDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleEditIdPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<VehicleDTO>>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleGetFormGet(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VehicleNewEditDTO>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleGetFormGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdActivePut(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleIdActivePut(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} dId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdDrillRigDIdPut(id: string, dId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProjectCompanyDTO>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleIdDrillRigDIdPut(id, dId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VehicleDetailDTO>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} VIN 
         * @param {string} machineId 
         * @param {string} description 
         * @param {string} economicNumber 
         * @param {string} id 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {Array<string>} [photosToRemove] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdPutForm(VIN: string, machineId: string, description: string, economicNumber: string, id: string, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, photosToRemove?: Array<string>, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleIdPutForm(VIN, machineId, description, economicNumber, id, photographsFiles, billFile, pedimentoFile, photosToRemove, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleInboxGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VehicleInboxDTOPagedResult>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleInboxGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [VIN] 
         * @param {string} [machineId] 
         * @param {string} [description] 
         * @param {string} [economicNumber] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehiclePostForm(VIN?: string, machineId?: string, description?: string, economicNumber?: string, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehiclePostForm(VIN, machineId, description, economicNumber, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, photographsFiles, billFile, pedimentoFile, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VehiclePostDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleSavePost(body?: VehiclePostDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleSavePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<VehicleDTOPagedResult>>> {
            const localVarAxiosArgs = await VehicleApiAxiosParamCreator(configuration).apiVehicleSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VehicleApi - factory interface
 * @export
 */
export const VehicleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {Array<string>} [vehicles] 
         * @param {boolean} [all] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleDownloadGet(vehicles?: Array<string>, all?: boolean, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return VehicleApiFp(configuration).apiVehicleDownloadGet(vehicles, all, active, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {VehiclePutDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleEditIdPut(id: string, body?: VehiclePutDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return VehicleApiFp(configuration).apiVehicleEditIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<VehicleDTO>>> {
            return VehicleApiFp(configuration).apiVehicleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleGetFormGet(id?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<VehicleNewEditDTO>> {
            return VehicleApiFp(configuration).apiVehicleGetFormGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdActivePut(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return VehicleApiFp(configuration).apiVehicleIdActivePut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return VehicleApiFp(configuration).apiVehicleIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} dId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdDrillRigDIdPut(id: string, dId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProjectCompanyDTO>> {
            return VehicleApiFp(configuration).apiVehicleIdDrillRigDIdPut(id, dId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<VehicleDetailDTO>> {
            return VehicleApiFp(configuration).apiVehicleIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} VIN 
         * @param {string} machineId 
         * @param {string} description 
         * @param {string} economicNumber 
         * @param {string} id 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {Array<string>} [photosToRemove] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleIdPutForm(VIN: string, machineId: string, description: string, economicNumber: string, id: string, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, photosToRemove?: Array<string>, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return VehicleApiFp(configuration).apiVehicleIdPutForm(VIN, machineId, description, economicNumber, id, photographsFiles, billFile, pedimentoFile, photosToRemove, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleInboxGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<VehicleInboxDTOPagedResult>> {
            return VehicleApiFp(configuration).apiVehicleInboxGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [VIN] 
         * @param {string} [machineId] 
         * @param {string} [description] 
         * @param {string} [economicNumber] 
         * @param {string} [assignedId] 
         * @param {string} [brandId] 
         * @param {string} [modelId] 
         * @param {number} [modelYear] 
         * @param {string} [engineId] 
         * @param {string} [placas] 
         * @param {number} [drillRigId] 
         * @param {string} [policyId] 
         * @param {string} [incisoId] 
         * @param {string} [packagePolicyId] 
         * @param {string} [measureId] 
         * @param {string} [fuelMeasureId] 
         * @param {string} [fuelTypeId] 
         * @param {string} [companyId] 
         * @param {string} [categoryId] 
         * @param {number} [tankSize] 
         * @param {boolean} [active] 
         * @param {Array<Blob>} [photographsFiles] 
         * @param {Blob} [billFile] 
         * @param {Blob} [pedimentoFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehiclePostForm(VIN?: string, machineId?: string, description?: string, economicNumber?: string, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return VehicleApiFp(configuration).apiVehiclePostForm(VIN, machineId, description, economicNumber, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, photographsFiles, billFile, pedimentoFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VehiclePostDTO} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleSavePost(body?: VehiclePostDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return VehicleApiFp(configuration).apiVehicleSavePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} pageSize 
         * @param {string} [search] 
         * @param {string} [orderByPropertyName] 
         * @param {SortOrderEnum} [sortOrder] 
         * @param {boolean} [active] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiVehicleSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<VehicleDTOPagedResult>> {
            return VehicleApiFp(configuration).apiVehicleSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VehicleApi - object-oriented interface
 * @export
 * @class VehicleApi
 * @extends {BaseAPI}
 */
export class VehicleApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [vehicles] 
     * @param {boolean} [all] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleDownloadGet(vehicles?: Array<string>, all?: boolean, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return VehicleApiFp(this.configuration).apiVehicleDownloadGet(vehicles, all, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {VehiclePutDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleEditIdPut(id: string, body?: VehiclePutDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return VehicleApiFp(this.configuration).apiVehicleEditIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<VehicleDTO>>> {
        return VehicleApiFp(this.configuration).apiVehicleGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleGetFormGet(id?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<VehicleNewEditDTO>> {
        return VehicleApiFp(this.configuration).apiVehicleGetFormGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleIdActivePut(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return VehicleApiFp(this.configuration).apiVehicleIdActivePut(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return VehicleApiFp(this.configuration).apiVehicleIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {string} dId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleIdDrillRigDIdPut(id: string, dId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProjectCompanyDTO>> {
        return VehicleApiFp(this.configuration).apiVehicleIdDrillRigDIdPut(id, dId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<VehicleDetailDTO>> {
        return VehicleApiFp(this.configuration).apiVehicleIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} VIN 
     * @param {string} machineId 
     * @param {string} description 
     * @param {string} economicNumber 
     * @param {string} id 
     * @param {Array<Blob>} [photographsFiles] 
     * @param {Blob} [billFile] 
     * @param {Blob} [pedimentoFile] 
     * @param {Array<string>} [photosToRemove] 
     * @param {string} [assignedId] 
     * @param {string} [brandId] 
     * @param {string} [modelId] 
     * @param {number} [modelYear] 
     * @param {string} [engineId] 
     * @param {string} [placas] 
     * @param {number} [drillRigId] 
     * @param {string} [policyId] 
     * @param {string} [incisoId] 
     * @param {string} [packagePolicyId] 
     * @param {string} [measureId] 
     * @param {string} [fuelMeasureId] 
     * @param {string} [fuelTypeId] 
     * @param {string} [companyId] 
     * @param {string} [categoryId] 
     * @param {number} [tankSize] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleIdPutForm(VIN: string, machineId: string, description: string, economicNumber: string, id: string, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, photosToRemove?: Array<string>, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return VehicleApiFp(this.configuration).apiVehicleIdPutForm(VIN, machineId, description, economicNumber, id, photographsFiles, billFile, pedimentoFile, photosToRemove, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} [search] 
     * @param {string} [orderByPropertyName] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleInboxGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<VehicleInboxDTOPagedResult>> {
        return VehicleApiFp(this.configuration).apiVehicleInboxGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} [VIN] 
     * @param {string} [machineId] 
     * @param {string} [description] 
     * @param {string} [economicNumber] 
     * @param {string} [assignedId] 
     * @param {string} [brandId] 
     * @param {string} [modelId] 
     * @param {number} [modelYear] 
     * @param {string} [engineId] 
     * @param {string} [placas] 
     * @param {number} [drillRigId] 
     * @param {string} [policyId] 
     * @param {string} [incisoId] 
     * @param {string} [packagePolicyId] 
     * @param {string} [measureId] 
     * @param {string} [fuelMeasureId] 
     * @param {string} [fuelTypeId] 
     * @param {string} [companyId] 
     * @param {string} [categoryId] 
     * @param {number} [tankSize] 
     * @param {boolean} [active] 
     * @param {Array<Blob>} [photographsFiles] 
     * @param {Blob} [billFile] 
     * @param {Blob} [pedimentoFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehiclePostForm(VIN?: string, machineId?: string, description?: string, economicNumber?: string, assignedId?: string, brandId?: string, modelId?: string, modelYear?: number, engineId?: string, placas?: string, drillRigId?: number, policyId?: string, incisoId?: string, packagePolicyId?: string, measureId?: string, fuelMeasureId?: string, fuelTypeId?: string, companyId?: string, categoryId?: string, tankSize?: number, active?: boolean, photographsFiles?: Array<Blob>, billFile?: Blob, pedimentoFile?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return VehicleApiFp(this.configuration).apiVehiclePostForm(VIN, machineId, description, economicNumber, assignedId, brandId, modelId, modelYear, engineId, placas, drillRigId, policyId, incisoId, packagePolicyId, measureId, fuelMeasureId, fuelTypeId, companyId, categoryId, tankSize, active, photographsFiles, billFile, pedimentoFile, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {VehiclePostDTO} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleSavePost(body?: VehiclePostDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return VehicleApiFp(this.configuration).apiVehicleSavePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} page 
     * @param {number} pageSize 
     * @param {string} [search] 
     * @param {string} [orderByPropertyName] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {boolean} [active] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleApi
     */
    public async apiVehicleSearchGet(page: number, pageSize: number, search?: string, orderByPropertyName?: string, sortOrder?: SortOrderEnum, active?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<VehicleDTOPagedResult>> {
        return VehicleApiFp(this.configuration).apiVehicleSearchGet(page, pageSize, search, orderByPropertyName, sortOrder, active, options).then((request) => request(this.axios, this.basePath));
    }
}
